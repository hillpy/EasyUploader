{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction What is EasyUploader EasyUploader is a lightweight js file upload library. It is developed based on HTML5、canvas、 fileReader and other technologies. It is more suitable for the use of mobile. Due to the different HTML support conditions of PC browsers, their use is limited, especially Internet explorer browsers. Flash will be considered to upload files in the later stage. It does not depend on other js libraries. Why develop File upload is very common in web development, and there are many existing upload libraries (webuploader uploaderfy, etc.). But the feeling is still heavy, not light enough, and want to control as much as possible and familiar with the source code. Therefore, I came up with the idea of developing an upload library and considered making it as simple and practical as possible. By the way, I can learn a lot of knowledge (HTML5 canvas closure tools, etc.). Online example EasyUploader example Features file upload picture compress drag upload fix photo orientation Remark This project is being developed. The release is still a test version for the time being. And I'm sorry my English is poor. Please submit the project questions on github issue.If you give me a star, I will be very happy. "},"installation.html":{"url":"installation.html","title":"Installation","keywords":"","body":"Installion use NPM Run this command npm install easyuploader --save use script use unpkg CDN https://unpkg.com/easyuploader/dist/easyuploader.min.js Copy easyuploader.min.js from the dist directory into your project directory and import it. "},"quick-start.html":{"url":"quick-start.html","title":"Quick start","keywords":"","body":"Quick start The following are several ways to use them for reference. Simple upload (bind to element node) var eu1 = new EasyUploader({ \"el\": \"#btn1\", \"url\": \"./upload.php\", \"language\": \"en\" }); Initialize the library to achieve the simplest upload function. The incoming el url language option. el represents the element button node, the upload button. url represents the address that needs to be submitted to the back end. language represents the type of message prompt language. Upload picture var eu2 = new EasyUploader({ \"el\": \"#btn2\", \"name\": \"file\", \"accept\": \"image/*\", \"url\": \"./upload.php\", \"autoUpload\": true, \"allowFileExt\": [\"jpg\", \"jpeg\", \"png\"], \"language\": \"en\", \"compress\": true, \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 }, \"compressQuality\": 0.9, \"maxFileSize\": \"10M\", onUploadProgress: function(e) { console.log(\"上传进度为：\" + ((e.loaded / e.total) * 100).toFixed(2) + \"%\"); }, onUploadStart: function(e) { console.log('即将上传。。'); }, onUploadComplete: function(data) { console.log(data); }, onUploadError: function(statusCode) { console.log(statusCode); } }); More perfect image upload settings, name accept represented attribute of the input. When autoUploader is true, after select files to upload automatically. allowFileExt represents the file extension that is allowed to be uploaded. compress represents whether to compress the image, and resize and compressQuality take effect when it is true. resize needs to be introduced into object, including maxWidth and maxHeight, on behalf of the biggest wide high pictures. compressQuality represents the image compression quality, only JPG and webp formats are valid. maxFileSize represents the maximum capacity allowed for file uploads. The next four are for uploading related events. Bind to input-type-file var eu3 = new EasyUploader({ \"file\": \"#easyuploader_file\", \"url\": \"./upload.php\", \"autoUpload\": true, \"language\": \"en\", \"compress\": true, \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 }, \"compressQuality\": 0.9, \"maxFileSize\": \"10 * 1024 * 1024\", onUploadProgress: function (e) { console.log(\"上传进度为：\" + ((e.loaded / e.total) * 100).toFixed(2) + \"%\"); }, onUploadStart: function (e) { console.log('即将上传。。'); }, onUploadComplete: function (data) { console.log(data) }, onUploadError: function (statusCode) { console.log(statusCode); } }); Directly bound to the 'input type = file, fill in the file option. It is much the same as binding to an element button node. Drag upload var eu4 = new EasyUploader({ \"el\": \"#drop_area\", \"url\": \"./upload.php\", \"autoUpload\": true, \"language\": \"en\", \"compress\": true, \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 }, \"compressQuality\": 0.9, \"maxFileSize\": \"2 * 1024 KB\", \"allowDrag\": true, onDrop: function(e) { console.log(\"drop\"); }, onDragOver: function(e) { console.log(\"dragover\"); }, onDragEnter: function(e) { console.log(\"dragenter\"); }, onDragLeave: function(e) { console.log(\"dragleave\"); }, onUploadProgress: function (e) { console.log(\"上传进度为：\" + ((e.loaded / e.total) * 100).toFixed(2) + \"%\"); }, onUploadStart: function (e) { console.log('即将上传。。'); }, onUploadComplete: function (data) { console.log(data) }, onUploadError: function (statusCode) { console.log(statusCode); } }); Drag upload is the same as binding to an element button node upload, only drag upload is added on top of that. allowDrag represents whether drag is enabled, and when true, the target file can be uploaded by dragging it to the button area of the binding element. And then, there are four more drag events available. "},"options.html":{"url":"options.html","title":"Options","keywords":"","body":"Options EasyUploader supports many option configurations at initialization time. el Type: String Default: \"\" Example: \"el\": \"#btn\" Remark: This option represents the element button node to which the upload function needs to bind. It could be a button element, a div element, etc. The file option is invalid when this option exists. The value is recommended as \"#id\" instead of \".class\". file Type: String Default: \"#file\" Example: \"file\": \"#file\" Remark: This option represents the input(type=file) object that needs to be bound to the upload function. Only valid if the el option does not exist. name Type: String Default: \"file\" Example: \"name\": \"file\" Remark: This option represents the name attribute of the input file created. Valid when the el option exists. This option must be filled in. id Type: String Default: Auto created. Example: \"id\": \"easyuploader_file\" Remark: This option represents the id attribute of the input file created. Valid when the el option exists. If not fill in, library will automatically create a value for this option. accept Type: String Default: \"\" Example: \"accept\": \"image/*\" Remark: This option represents the accept attribute of the input file created. Valid when the el option exists. url Type: String Default: \"\" Example: \"url\": \"./upload.php\" Remark: This option represents the backend url to which the file is submitted. The library is only responsible for the front-end part, the back-end upload code needs to be written by yourself. upload.php Basic examples 0, 'msg' => 'upload failed' ); // originalFileName $fileName = $_FILES['file']['name']; // tempName $tmpName = $_FILES['file']['tmp_name']; // fileType $type = $_FILES['file']['type']; // fileSize $size = $_FILES['file']['size']; $uploadDir = './file/'; if (!file_exists($uploadDir) || !is_dir($uploadDir)) { mkdir($uploadDir); } // open and read tempName $fp = fopen($tmpName, 'r'); $file = fread($fp, $size); $data = $file; // open to write $newFile = fopen($uploadDir . $fileName, 'w'); // write to file fwrite($newFile, $data); // close file fclose($newFile); $res['code'] = 1; $res['msg'] = 'upload successful'; $res['data'] = array( 'file_type'=>$type, 'path'=>$uploadDir . $fileName ); echo json_encode($res); } else { exit('forbidden'); } method Type: String Default: \"post\" Example: \"method\": \"post\" Remark: This option represents the HTTP ajax request type at upload time. Post is recommended。 maxFileSize Type: String Default: \"2M\" Example: \"maxFileSize\": \"10M\" Remark: This option represents the maximum size of the file to be uploaded. Fill out the Example: \"10 * 1024 * 1024\"，\"2M\"，\"500 KB\"，\"10 * 1 MB\" and so on. If you do not fill in the letters (\"KB\", etc.), the default is B(bytes). You can also fill in \"*\" for numerical calculation. Note: letters must be capitalized. autoUpload Type: Boolean Default: true Example: \"autoUpload\": true Remark: This option represents whether to automatically upload a file after selecting it. If false, you need to manually call the method uploadEasyUploader.upload(). allowDrag Type: Boolean Default: false Example: \"allowDrag\": true Remark: This option represents whether drag upload is enabled or not. When enabled, files can be directly dragged to the binding element area for uploading. allowFileExt Type: Array Default: [] Example: \"allowFileExt\": [\"jpg\", \"jpeg\", \"png\"] Remark: This option represents the extension type of file that is allowed to be uploaded. Depending on the extension name of the file name, the extension name that is not allowed will not be uploaded. When the default is an empty array, the upload file type is not restricted. Note: although the accept attribute of input can limit the file type when selecting a file, it will not work when dragging upload is enabled, so to limit the file type, it is recommended to configure this option. Also, you must fill in lowercase letters. compress Type: Boolean Default: true Example: \"compress\": true Remark: This option represents whether to compress the image before uploading it. Note: only images are valid. If true, it will be compressed before uploading. resize Type: Object Default: { \"maxWidth\": 800, \"maxHeight\": 800 } Example: \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 } Remark: This option represents the maximum width and height (compression on the width and height of the image) that the image can be redrawn to. You should fill in two keys, maxWidth and maxHeight. It takes effect when compress option is true. compressQuality Type: Number Default: 0.92 Example: \"compressQuality\": 0.9 Remark: This option represents the quality of the image redrawn (compression on the image quality). On the basis of redrawing size, the image quality is compressed. It takes effect when compress option is true. And only valid for JPG webp format images. The value must be between 0 and 1, and the larger the value, the higher the quality. resType Type: String Default: \"json\" Example: \"resType\": \"json\" Remark: This option represents formatting the returned results. If it is json, the returned result is converted to json format. tipClass Type: String Default: \"\" Example: \"tipClass\": \"tip\" Remark: This option is the value of library message prompt layer class attribute. You can add class values for style overrides. fixOrientation Type: Boolean Default: true Example: \"fixOrientation\": false Remark: This option is to automatically correct the orientation of the image. When the mobile use the camera to take photos and upload, and use canvas to draw the uploaded photos, there will be the problem of photo orientation reversal. This is automatically fixed when the option is true. Note: JPG only works language Type: String Default: \"cn\" Example: \"language\": \"en\" Remark: This option is the language type of the library prompt message. For example, \"please select the file\", \"the file is too large, the maximum allowed is 2M\" and so on. The optional value is either \"en\" or \"cn\". tipDurationTime Type: Number Default: 3 Example: \"tipDurationTime\": 1.5 Remark: This option is the duration of the library prompt information layer display, in seconds。For example, if it is set to 1.5, the prompt information layer will disappear after 1.5 seconds. "},"events.html":{"url":"events.html","title":"Events","keywords":"","body":"Events EasyUploader also provides events for more flexible interactions. onUploadProgress Event example: onUploadProgress: function(e) {} Triggering time: Triggered when the file starts uploading. Remark: When the library uploads a file, it listens for the upload progress event and executes the callback event. onUploadStart Event example: onUploadStart: function(e) {} Triggering time: Triggered before starting file upload. Remark: When the library uploads a file, it listens for the loadstart event and executes the callback event onUploadComplete Event example: onUploadComplete: function(data) {} Triggering time: Triggered after file upload successful. Remark: When the library successfully uploads the file, the callback event is executed and the result is processed according to the resType option and returned as a parameter. onUploadError Event example: onUploadError: function(statusCode) {} Triggering time: Triggered after file upload failes. Remark: When the library fails to upload the file, it executes the callback event and returns the HTTP status code as a parameter when the failure occurs. onDrop Event example: onDrop: function(e) {} Triggering time: Triggered when a file is placed in the drag area (that is, when the user to let go). Remark: The library listens for drop events in the drag area, blocks the default event, and then executes the callback event. onDragOver Event example: onDragOver: function(e) {} Triggering time: Event are constantly triggered when a file in a drag area. Remark: The library listens for the dragover event in the drag area, blocks the default event, and then executes the callback event. onDragEnter Event example: onDragEnter: function(e) {} Triggering time: Triggered when a file is dragged into the drag area. Remark: The library listens for the dragenter event in the drag area, blocks the default event, and then executes the callback event. onDragLeave Event example: onDragLeave: function(e) {} Triggering time: Triggered when a file is dragged out of the drag area. Remark: The library listens for the dragleave event in the drag area, blocks the default event, and then executes the callback event. "},"methods.html":{"url":"methods.html","title":"Methods","keywords":"","body":"Methods EasyUploader also provides methods that can be used flexibly to implement different requirements. upload() Parameters: none Reutrn: none Call example: EasyUploader.upload() Remark: Execute file upload. Usage scenario: You can set the autoUpload option to false if you don't want to automatically upload after the file is selected. You can then use this method to upload file. enableFileObjClick() Parameters: none Reutrn: none Call example: EasyUploader.enableFileObjClick() Remark: Enable file object click operations. Usage scenario: After the file object click operation is disabled (ie, clicking on the bound element node or the file node is unresponsive), the method can be executed to enable the click operation. disableFileObjClick() Parameters: none Reutrn: none Call example: EasyUploader.disableFileObjClick() Remark: Disable file object click operations. Usage scenario: This method can be implemented if you want to disable the click operation of the bound element node or file node. "},"properties.html":{"url":"properties.html","title":"Properties","keywords":"","body":"Properties EasyUploader also supports the acquisition and modification of internal properties. classPrefix Type: String Remark: This attribute is generally lowercase of the library name (such as: easyuploader), used as a prefix of the attribute name (such as class, id) when the element is created inside the library to avoid conflicts. Generated when EasyUploader is initialized. version Type: String Remark: This attribute is the library version number (without 'v'). Generated when EasyUploader is initialized. fileObj Type: Object Remark: This attribute is an input(type=file) object. Generated when EasyUploader is initialized. elObj Type: Object Remark: This property is the object of the bound element. Generated when EasyUploader is initialized. fileType Type: String Remark: This attribute is the type of file uploaded. Obtained when the file is uploaded. fileName Type: String Remark: This attribute is the name of the uploaded file. Obtained when the file is uploaded. fileSize Type: Number Remark: This attribute is the capacity of the uploaded file, in bytes. Obtained when the file is uploaded. fileExt Type: String Remark: This attribute is the extension of the uploaded file. Get when the file is uploaded and convert to lowercase. fileObjClickStatus Type: Boolean Remark: This attribute is the available state of the click action for the file object. True is available and false is disabled. The default is true. canvas Type: Object Remark: This property is an internal canvas object. context Type: Object Remark: This property is an internal context object. formData Type: Object Remark: This property is an internal FormData object. options Type: Object Remark: This attribute is the expanded final configuration option. tips Type: Object Remark: This attribute configures the object for the prompt information. "}}