{"./":{"url":"./","title":"介绍","keywords":"","body":"介绍 EasyUploader是什么 EasyUploader是一个轻量级的的js文件上传库。它基于HTML5、canvas、fileReader等技术开发。比较适合移动端使用，pc端浏览器由于HTML支持情况不同，导致使用比较受限，特别是IE浏览器，后期会考虑添加flash上传文件。它不依赖其它js库。 为什么要开发 文件上传在web开发中是非常常见的，现在已有的上传库也非常多（webuploader、uploaderfy等），但是感觉还是偏重，不够轻量，而且想尽可能的掌控与熟悉源码。故萌生了想开发一款上传库的想法，考虑尽量将其做得简单实用。顺便可以学习到不少的知识（HTML5、canvas、闭包、各种工具等等）。 在线例子 EasyUploader example 特性 文件上传 图片压缩 拖曳上传 照片上传旋转修正 备注 项目正在开发中。发布的暂时还是测试版本。我很抱歉我的英语比较烂。关于项目问题，请在github issue提交即可。如果亲能赏个star，我会非常高兴的。 "},"installation.html":{"url":"installation.html","title":"安装","keywords":"","body":"安装 NPM方式 执行以下命令即可 npm install easyuploader --save script引入方式 使用unpkg的cdn https://unpkg.com/easyuploader/dist/easyuploader.min.js 直接将dist目录下的easyuploader.min.js拷贝至您的项目目录中并引入即可。 "},"quick-start.html":{"url":"quick-start.html","title":"快速开始","keywords":"","body":"快速开始 以下列举几种使用使用方式供参考体验。 简单上传（绑定到元素按钮节点） var eu1 = new EasyUploader({ \"el\": \"#btn1\", \"url\": \"./upload.php\" }); 实例化库，实现最简单的上传功能。传入el、url选项即可。el代表元素按钮节点，即上传按钮，url代表需要提交到后端的地址。 图片上传 var eu2 = new EasyUploader({ \"el\": \"#btn2\", \"name\": \"file\", \"accept\": \"image/*\", \"url\": \"./upload.php\", \"autoUpload\": true, \"allowFileExt\": [\"jpg\", \"jpeg\", \"png\"], \"compress\": true, \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 }, \"compressQuality\": 0.9, \"maxFileSize\": \"10M\", onUploadProgress: function(e) { console.log(\"上传进度为：\" + ((e.loaded / e.total) * 100).toFixed(2) + \"%\"); }, onUploadStart: function(e) { console.log('即将上传。。'); }, onUploadComplete: function(data) { console.log(data); }, onUploadError: function(statusCode) { console.log(statusCode); } }); 较完善的图片上传设置，name、accept代表input中的属性。当autoUploader为true时，在选择文件之后将自动执行上传。allowFileExt代表允许上传的文件扩展名。compress代表是否对图片进行压缩，为true时resize和compressQuality生效。resize需要传入对象，包含maxWidth和maxHeight，代表图片的最大宽高。compressQuality代表图片压缩质量，仅jpg和webp格式有效。maxFileSize代表允许文件上传的最大容量。后面四个为上传相关事件。 绑定到input-type-file上传 var eu3 = new EasyUploader({ \"file\": \"#easyuploader_file\", \"url\": \"./upload.php\", \"autoUpload\": true, \"compress\": true, \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 }, \"compressQuality\": 0.9, \"maxFileSize\": \"10 * 1024 * 1024\", onUploadProgress: function (e) { console.log(\"上传进度为：\" + ((e.loaded / e.total) * 100).toFixed(2) + \"%\"); }, onUploadStart: function (e) { console.log('即将上传。。'); }, onUploadComplete: function (data) { console.log(data) }, onUploadError: function (statusCode) { console.log(statusCode); } }); 直接绑定到'input type=file'，填写到file选项即可。它与绑定到元素按钮节点大同小异。 拖曳上传 var eu4 = new EasyUploader({ \"el\": \"#drop_area\", \"url\": \"./upload.php\", \"autoUpload\": true, \"compress\": true, \"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 }, \"compressQuality\": 0.9, \"maxFileSize\": \"2 * 1024 KB\", \"allowDrag\": true, onDrop: function(e) { console.log(\"drop\"); }, onDragOver: function(e) { console.log(\"dragover\"); }, onDragEnter: function(e) { console.log(\"dragenter\"); }, onDragLeave: function(e) { console.log(\"dragleave\"); }, onUploadProgress: function (e) { console.log(\"上传进度为：\" + ((e.loaded / e.total) * 100).toFixed(2) + \"%\"); }, onUploadStart: function (e) { console.log('即将上传。。'); }, onUploadComplete: function (data) { console.log(data) }, onUploadError: function (statusCode) { console.log(statusCode); } }); 拖曳上传与绑定到元素按钮节点上传无异，仅仅在此基础上新增拖曳上传。allowDrag代表是否开启拖曳，当为true时，目标文件拖至绑定元素按钮区域即可实现上传。然后，还有四个拖曳事件可供使用。 "},"options.html":{"url":"options.html","title":"选项","keywords":"","body":"选项 EasyUploader在实例化时支持很多选项配置。选项以对象键值形式传入，通过不同选项实现不同特性。 el 类型：String 默认值：\"\" 值示例：\"el\": \"#btn\" 备注：该选项表示上传功能需要绑定的元素按钮节点。可以是button元素，或者div元素等等。当该选项存在时file选项将无效。值建议为\"#id\"形式而非\".class\"形式。 file 类型：String 默认值：\"#file\" 值示例：\"file\": \"#file\" 备注：该选项表示上传功能需要绑定的input（type=file）对象。仅在el选项不存在时有效。 name 类型：String 默认值：\"file\" 值示例：\"name\": \"file\" 备注：该选项代表创建的input file的name属性。当el选项存在时有效。必须填写该选项。 id 类型：String 默认值：自动创建 值示例：\"id\": \"easyuploader_file\" 备注：该选项代表创建的input file的id属性。当el选项存在时有效。若不填写，库将会自动创建该选项的值。 accept 类型：String 默认值：\"\" 值示例：\"accept\": \"image/*\" 备注：该选项代表创建的input file的accept属性。当el选项存在时有效。 url 类型：String 默认值：\"\" 值示例：\"url\": \"./upload.php\" 备注：该选项代表文件提交到的后端url。本库只负责前端部分，后端上传代码需自己编写。 upload.php简单示例 0, 'msg' => '上传失败' ); // 原文件名 $fileName = $_FILES['file']['name']; // 临时文件 $tmpName = $_FILES['file']['tmp_name']; // 文件类型 $type = $_FILES['file']['type']; // 文件大小 $size = $_FILES['file']['size']; $uploadDir = './file/'; if (!file_exists($uploadDir) || !is_dir($uploadDir)) { mkdir($uploadDir); } // 打开并读取临时文件 $fp = fopen($tmpName, 'r'); $file = fread($fp, $size); $data = $file; // 打开文件准备写入 $newFile = fopen($uploadDir . $fileName, 'w'); // 写入二进制流到文件 fwrite($newFile, $data); // 关闭文件 fclose($newFile); $res['code'] = 1; $res['msg'] = '上传成功'; $res['data'] = array( 'file_type'=>$type, 'path'=>$uploadDir . $fileName ); echo json_encode($res); } else { exit('禁止访问'); } method 类型：String 默认值：\"post\" 值示例：\"method\": \"post\" 备注：该选项代表上传时的http ajax请求类型。推荐为post。 maxFileSize 类型：String 默认值：\"2M\" 值示例：\"maxFileSize\": \"10M\" 备注：该选项代表上传的文件的最大容量。填写值示例：\"10 * 1024 * 1024\"，\"2M\"，\"500 KB\"，\"10 * 1 MB\"等等。若不填写字母（\"KB\"等），默认为B（字节）。还可填写\"*\"进行数值计算。注意：字母必须为大写。 autoUpload 类型：Boolean 默认值：true 值示例：\"autoUpload\": true 备注：该选项代表在选择文件后是否自动上传文件。若为false，需要手动调用方法上传EasyUploader.upload() allowDrag 类型：Boolean 默认值：false 值示例：\"allowDrag\": true 备注：该选项代表是否开启拖曳上传功能。开启后可直接将文件拖曳至绑定元素区域实现上传。 allowFileExt 类型：Array 默认值：[] 值示例：\"allowFileExt\": [\"jpg\", \"jpeg\", \"png\"] 备注：该选项代表允许上传的文件的扩展类型。完全根据文件名的扩展名称来进行判断，不允许的扩展名称将无法上传。默认为空数组时，不限制上传文件类型。注意：虽然input的accept属性在选择文件时可以限制文件类型，但开启拖曳上传时将失效，故若要限制文件类型，建议配置此选项。另外，必须填写小写字母。 compress 类型：Boolean 默认值：true 值示例：\"compress\": true 备注：该选项代表在图片上传之前，是否对图片进行压缩处理。注意：仅图片有效。若为true，则会先进行压缩再进行上传。 resize 类型：Object 默认值：{ \"maxWidth\": 800, \"maxHeight\": 800 } 值示例：\"resize\": { \"maxWidth\": 1000, \"maxHeight\": 1000 } 备注：该选项代表图片重新绘制的最大宽高（图片宽高上的压缩）。需传入maxWidth（最大宽），maxHeight（最大高）两个键值。当compress为true时生效。 compressQuality 类型：Number 默认值：0.92 值示例：\"compressQuality\": 0.9 备注：该选项代表图片重新绘制的质量（图片质量上的压缩）。在重新绘制尺寸基础上再对图片质量进行压缩。当compress为true时生效。且仅对jpg、webp格式的图片有效。值必须在0-1之间，值越大质量越高。 resType 类型：String 默认值：\"json\" 值示例：\"resType\": \"json\" 备注：该选项代表对返回结果做格式处理。若为json，将会把返回结果转成json格式。 tipClass 类型：String 默认值：\"\" 值示例：\"tipClass\": \"tip\" 备注：该选项为库消息提示层class属性的值。可添加class值进行样式重写 fixOrientation 类型：Boolean 默认值：true 值示例：\"fixOrientation\": false 备注：该选项为是否自动修正图片的方向。移动端使用相机拍照上传，并使用canvas绘制上传的照片时，会出现照片方向翻转的问题。当该选项为true时会对此进行自动修正。注意：仅jpg有效。 language 类型：String 默认值：\"cn\" 值示例：\"language\": \"en\" 备注：该选项为库提示信息的语言类型。比如\"请选择文件\"、\"文件太大，最大允许为2M\"等等。可选值为\"en\"或\"cn\"。 tipDurationTime 类型：Number 默认值：3 值示例：\"tipDurationTime\": 1.5 备注：该选项为库提示信息层显示的持续时间，单位为秒。比如设置为1.5，则提示信息层显示后将在1.5秒之后消失。 "},"events.html":{"url":"events.html","title":"事件","keywords":"","body":"事件 EasyUploader还提供了一些事件，便于做更多灵活交互。 onUploadProgress 事件示例：onUploadProgress: function(e) {} 触发时间：文件开始上传时触发。 备注：该库上传文件时会监听上传进度事件（progress），并执行该回调事件。 onUploadStart 事件示例：onUploadStart: function(e) {} 触发时间：文件上传开始前触发。 备注：该库上传文件时会监听开始加载事件（loadstart），并执行该回调事件。 onUploadComplete 事件示例：onUploadComplete: function(data) {} 触发时间：文件上传成功后触发。 备注：该库上传文件成功后，会执行该回调事件，并将结果根据resType选项处理后作为参数返回。 onUploadError 事件示例：onUploadError: function(statusCode) {} 触发时间：文件上传失败后触发。 备注：该库上传文件失败后，会执行该回调事件，并将失败时的http状态码作为参数返回。 onDrop 事件示例：onDrop: function(e) {} 触发时间：当文件在拖曳区域内放入（即用户松手）时触发。 备注：该库会监听拖曳区域的drop事件，并阻止默认事件，然后执行该回调事件。 onDragOver 事件示例：onDragOver: function(e) {} 触发时间：当文件在拖曳区域内时会不断触发。 备注：该库会监听拖曳区域的dragover事件，并阻止默认事件，然后执行该回调事件。 onDragEnter 事件示例：onDragEnter: function(e) {} 触发时间：当文件被拖入拖曳区域内时触发。 备注：该库会监听拖曳区域的dragenter事件，并阻止默认事件，然后执行该回调事件。 onDragLeave 事件示例：onDragLeave: function(e) {} 触发时间：当文件被拖离拖曳区域内时触发。 备注：该库会监听拖曳区域的dragleave事件，并阻止默认事件，然后执行该回调事件。 "},"methods.html":{"url":"methods.html","title":"方法","keywords":"","body":"方法 EasyUploader还提供了一些方法。可灵活使用来实现不同需求。 upload() 参数：无 返回值: 无 调用示例：EasyUploader.upload() 备注：执行文件上传。 使用场景：若不想在文件选择后自动上传，可设置autoUpload选项为false。之后可使用该方法来进行文件上传。 enableFileObjClick() 参数：无 返回值: 无 调用示例：EasyUploader.enableFileObjClick() 备注：启用文件对象点击操作。 使用场景：在文件对象点击操作被禁用后（即点击绑定的元素节点或文件节点无反应），可执行该方法来启用点击操作。 disableFileObjClick() 参数：无 返回值: 无 调用示例：EasyUploader.disableFileObjClick() 备注：禁用文件对象点击操作。 使用场景：若希望禁用绑定的元素节点或文件节点的点击操作，可执行该方法来实现。 "},"properties.html":{"url":"properties.html","title":"属性","keywords":"","body":"属性 EasyUploader还支持内部属性的获取与修改。 classPrefix 类型：String 备注：该属性为一般为类库名称小写（如：easyuploader），用于作为类库内部创建元素时的属性名称（如class、id）的前缀，避免冲突产生。在EasyUploader初始化时生成。 version 类型：String 备注：该属性为类库版本号（不含'v'）。在EasyUploader初始化时生成。 fileObj 类型：Object 备注：该属性为input（type=file）对象。在EasyUploader初始化时生成。 elObj 类型：Object 备注：该属性为绑定的元素的对象。在EasyUploader初始化时生成。 fileType 类型：String 备注：该属性为上传文件的类型。在文件上传时获取。 fileName 类型：String 备注：该属性为上传文件的名称。在文件上传时获取。 fileSize 类型：Number 备注：该属性为上传文件的容量，单位字节。在文件上传时获取。 fileExt 类型：String 备注：该属性为上传文件的扩展名。在文件上传时获取，并转为小写。 fileObjClickStatus 类型：Boolean 备注：该属性为文件对象的点击操作可用状态。true为可用，false为禁用。默认为true。 canvas 类型：Object 备注：该属性为内部canvas对象。 context 类型：Object 备注：该属性为内部context对象。 formData 类型：Object 备注：该属性为内部FormData对象。 options 类型：Object 备注：该属性为扩展后的最终配置选项。 tips 类型：Object 备注：该属性为提示信息配置对象。 "}}